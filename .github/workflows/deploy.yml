name: Deploy FastAPI App to GCP VM

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout Source Code
        uses: actions/checkout@v4

      - name: 2. Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 3. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 4. Build Docker Image (FastAPI)
        run: |
          echo "==== 도커 이미지 빌드 시작 ===="
          docker build -t my-fastapi-app .
          echo "==== 도커 이미지 빌드 완료 ===="

      - name: 5. Setup SSH for GCP VM
        run: |
          echo "==== SSH 키 설정 시작 ===="
          mkdir -p ~/.ssh
          
          # SSH 키 파일 생성 (개행문자 처리)
          echo "${{ secrets.GCP_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # SSH 설정 파일 생성
          cat >> ~/.ssh/config << EOF
          Host gcp-vm
            HostName 34.47.103.49
            User gwinvade99
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          
          chmod 600 ~/.ssh/config
          
          # SSH 키 확인
          echo "SSH 키 파일 내용 확인:"
          ls -la ~/.ssh/
          echo "SSH 키 형식 확인:"
          ssh-keygen -l -f ~/.ssh/id_ed25519 || echo "SSH 키 형식에 문제가 있습니다."
          
          # SSH 키 내용 확인 (처음 몇 줄만)
          echo "SSH 키 내용 (처음 3줄):"
          head -3 ~/.ssh/id_ed25519
          echo "SSH 키 내용 (마지막 3줄):"
          tail -3 ~/.ssh/id_ed25519
          
          # 공개키 추출 시도
          echo "공개키 추출 시도:"
          ssh-keygen -y -f ~/.ssh/id_ed25519 || echo "공개키 추출 실패"
          
          echo "==== SSH 키 설정 완료 ===="

      - name: 6. Test SSH Connection
        run: |
          echo "==== SSH 연결 테스트 ===="
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=10 gwinvade99@34.47.103.49 'echo "SSH 연결 성공!"' || {
            echo "SSH 연결 실패. 다음을 확인하세요:"
            echo "1. GCP_SSH_KEY secret이 올바른 형식인지 확인"
            echo "2. GCP VM의 authorized_keys에 공개키가 등록되었는지 확인"
            echo "3. GCP VM의 방화벽 설정 확인"
            exit 1
          }

      - name: 7. Check Required Tools on GCP VM
        run: |
          echo "==== GCP VM 필수 도구 확인 ===="
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=30 gwinvade99@34.47.103.49 '
            echo "rsync 버전 확인:"
            rsync --version || echo "rsync이 설치되지 않았습니다. 수동으로 설치해주세요: sudo apt-get install -y rsync"
            
            echo "Docker 버전 확인:"
            sudo docker --version || echo "Docker가 설치되지 않았습니다."
            
            echo "필수 도구 확인 완료!"
          '

      - name: 8. Deploy Files to GCP VM
        run: |
          echo "==== GCP VM에 프로젝트 파일 복사 ===="
          # 서버의 기존 디렉토리 정리 및 재생성
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=30 gwinvade99@34.47.103.49 'rm -rf ~/beneficial-be && mkdir ~/beneficial-be'
          
          # scp를 사용하여 모든 프로젝트 파일과 디렉토리를 재귀적으로 복사
          scp -r -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=30 ./* gwinvade99@34.47.103.49:~/beneficial-be/
          echo "파일 복사 완료!"

      - name: 9. Build & Run Docker on GCP VM
        run: |
          echo "==== GCP VM에서 도커 컨테이너 빌드 및 실행 ===="
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=30 gwinvade99@34.47.103.49 '
            set -e
            cd ~/beneficial-be
            echo "기존 fastapi-app 컨테이너 정지 및 삭제 시도..."
            sudo docker stop fastapi-app || true
            sudo docker rm fastapi-app || true
            echo "도커 이미지 빌드..."
            sudo docker build -t my-fastapi-app .
            echo "도커 컨테이너 실행(포트 8000, localhost만 접근 가능)..."
            sudo docker run -d --name fastapi-app -p 127.0.0.1:8000:8000 --env MONGO_URI="${{ secrets.MONGO_URI }}" my-fastapi-app
            echo "==== 배포 완료 ===="
          '

      - name: 10. Test Application Deployment
        run: |
          echo "==== 애플리케이션 배포 테스트 ===="
          # 잠시 대기 (애플리케이션 시작 시간)
          sleep 10
          
          # 로컬에서 FastAPI 애플리케이션 테스트
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=10 gwinvade99@34.47.103.49 '
            echo "FastAPI 애플리케이션 상태 확인..."
            curl -f http://localhost:8000/ || echo "FastAPI 애플리케이션에 접근할 수 없습니다."
            
            echo "Swagger 문서 접근 테스트..."
            curl -f http://localhost:8000/docs || echo "Swagger 문서에 접근할 수 없습니다."
          '
          
          echo "배포된 애플리케이션 접속 URL:"
          echo "🌐 메인 애플리케이션: https://study-mate.club"
          echo "📚 Swagger 문서: https://study-mate.club/docs"
          echo "🔧 API 문서: https://study-mate.club/redoc"

      - name: 11. Show Docker Container Logs (On Failure)
        if: failure()
        run: |
          echo "==== FastAPI 도커 컨테이너 로그 출력 (배포 실패시) ===="
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=10 gwinvade99@34.47.103.49 '
            sudo docker logs fastapi-app || echo "컨테이너 로그가 없습니다."
          '
